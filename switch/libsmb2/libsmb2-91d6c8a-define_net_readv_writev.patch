--- a/lib/socket.c
+++ b/lib/socket.c
@@ -80,6 +80,106 @@
 
 #define MAX_URL_SIZE 256
 
+#ifdef __SWITCH__
+
+#include <netdb.h>
+#include <netinet/tcp.h>
+#include <netinet/in.h>
+#include <poll.h>
+
+
+ssize_t writev(int fd, const struct iovec *vector, int count)
+{
+    size_t bytes = 0;
+
+    for (int i = 0; i < count; ++i)
+    {
+        if ((SIZE_MAX/2) - bytes < vector[i].iov_len)
+        {
+            return -1;
+        }
+        bytes += vector[i].iov_len;
+    }
+
+    char *buffer = (char *)malloc(bytes);
+
+    if (buffer == NULL)
+    {
+        return -1;
+    }
+
+    size_t to_copy = bytes;
+    char *bp = buffer;
+
+    for (int i = 0; i < count; ++i)
+    {
+        size_t copy = MIN(vector[i].iov_len, to_copy);
+        bp = mempcpy((void *)bp, (void *)vector[i].iov_base, copy);
+        to_copy -= copy;
+        if (to_copy == 0)
+        {
+            break;
+        }
+    }
+
+    ssize_t bytes_written = write(fd, buffer, bytes);
+    free(buffer);
+    return bytes_written;
+}
+
+ssize_t readv(int fd, const struct iovec *vector, int count)
+{
+    size_t bytes = 0;
+
+    for (int i = 0; i < count; ++i)
+    {
+        if ((SIZE_MAX/2) - bytes < vector[i].iov_len)
+        {
+            return -1;
+        }
+        bytes += vector[i].iov_len;
+    }
+
+    char *buffer = (char *)malloc(bytes);
+    char *bp = buffer;
+
+    buffer = (char *)malloc(bytes);
+
+    if (buffer == NULL)
+    {
+        return -1;
+    }
+
+    ssize_t bytes_read = read(fd, buffer, bytes);
+
+    if (bytes_read < 0)
+    {
+        free((void*)buffer);
+        return -1;
+    }
+
+    bytes = bytes_read;
+
+    for (int i = 0; i < count; ++i)
+    {
+        size_t copy = MIN(vector[i].iov_len, bytes);
+        memcpy((void *)vector[i].iov_base, (void *)bp, copy);
+        bp += copy;
+        bytes -= copy;
+
+        if (bytes == 0)
+        {
+            break;
+        }
+    }
+
+    free((void*)buffer);
+    return bytes_read;
+}
+
+
+#endif
+
 static int
 smb2_get_credit_charge(struct smb2_context *smb2, struct smb2_pdu *pdu)
 {
